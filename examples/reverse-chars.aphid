; reverse-chars.aphid
; TODO: creating reverse versions of charsets (and maybe other versions)
; might be common enough that we should add this to the prelude, or a
; standard library.

; create a new charset
:c64-rev make-charset

; ( bitmap -- bitmap' )
{ ; bitmap
  { flip-bit } map
} :reverse-bitmap defword

; ( bit -- 1-bit)
{ ; bit
  1          ; bit 1
  swap       ; 1 bit
  -
 } :flip-bit defword

; ( charname -- )
{ dup               ; charname charname
  :c64              ; charname charname :c64
  swap              ; charname :c64 charname
  get-hires-bitmap  ; charname [bits...]
  reverse-bitmap    ; charname [bits'...]
  :c64-rev          ; charname [bits...] :c64-rev
  ror               ; :c64-rev charname [bits...]
  set-hires-bitmap
} :make-reverse-char defword

:c64 get-charnames { make-reverse-char } for-each

:c64-upside-down make-charset

; ( bitmap -- bitmap' )
{ list-reverse } :upside-down-bitmap defword

; ( charname -- )
{ dup                 ; charname charname
  :c64                ; charname charname :c64
  swap                ; charname :c64 charname
  get-hires-bitmap    ; charname [bits...]
  upside-down-bitmap  ; charname [bits...]
  :c64-upside-down    ; charname [bits...] :c64-upside-down
  ror                 ; :c64-upside-down charname [bits...]
  set-hires-bitmap  
} :make-upside-down-char defword

:c64 get-charnames { make-upside-down-char } for-each

;; --- horizontal mirroring ---

:c64-mirror-x make-charset

; reverse-slice ( bitmap n -- bitmap' )
; Take the n-th 8-slice of the bitmap, reverse it, and put it back.
{                      ; bitmap n
  over over            ; bitmap n bitmap n
  dup                  ; bitmap n bitmap n n
  8 *                  ; bitmap n bitmap n n*8
  swap                 ; bitmap n bitmap n*8 n
  8 * 8 +              ; bitmap n bitmap n*8 n*8+8
  list-slice           ; bitmap n slice
  list-reverse         ; bitmap n slice'
  ror                  ; slice' bitmap n
  8 *                  ; slice' bitmap n*8
  rol                  ; bitmap n*8 slice'
  list-set-slice       ; bitmap'
} :reverse-slice defword

; mirror-bitmap-x ( bitmap -- bitmap' )
; Mirror a bitmap horizontally.
{ 
  0 7 {               ; bitmap n
    reverse-slice
  } for
} :mirror-bitmap-x defword

; ( charname -- )
{ dup                 ; charname charname
  :c64                ; charname charname :c64
  swap                ; charname :c64 charname
  get-hires-bitmap    ; charname [bits...]
  mirror-bitmap-x     ; charname [bits...]
  :c64-mirror-x       ; charname [bits...] :c64-mirror-x
  ror                 ; :c64-mirror-x charname [bits...]
  set-hires-bitmap  
} :make-mirror-x-char defword

:c64 get-charnames { make-mirror-x-char } for-each

; GOAL: to have a general-purpose word that can be used to
; convert the characters in a charset. should take original charset,
; target charset, and a block that is executed against the bitmap
; (as a 64-element list of bits) to convert it.


1 1 15 :c64 "NORMAL TEXT..." writexy*

1 3 15 :c64-rev "AND IN REVERSE!" writexy*

1 5 15 :c64-upside-down "UPSIDE DOWN... dizzy does it make me" string-reverse writexy*

1 7 15 :c64-mirror-x "horizontal mirroring..." writexy*